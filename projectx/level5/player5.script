-- the speed in degrees/second with which the ship is turning
-- this is sometimes also called angular velocity
go.property("turn_speed", 150)

function init(self)
	msg.post(".", "acquire_input_focus")
	self.turn = 0	-- 1 = turning left, 0 = not turning, -1 = turning right
	self.angle = 0	-- current facing in degrees
end

function update(self, dt)
	-- turn
	self.angle = (self.angle + self.turn * self.turn_speed * dt) % 360
	
	-- defold describes rotations using something called quaternions
	-- we can create a quaternion from an angle in radians
	local angle_in_radians = math.rad(self.angle)
	local rotation = vmath.quat_rotation_z(angle_in_radians)
	go.set_rotation(rotation)
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		if action.pressed then
			self.turn = 1
		elseif action.released then
			self.turn = 0
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.turn = -1
		elseif action.released then
			self.turn = 0
		end
	elseif action_id == hash("fire") and action.pressed then
		-- spawn a bullet
		-- the bullet will inherit the rotation of the ship so we don't need
		-- to worry about rotating the bullet
		local bullet = factory.create("#bulletfactory")

		-- move the bullet in the direction it is rotated
		-- we get the rotation expressed as a quaternion
		-- we have an unrotated movement vector
		-- we rotate the movement vector to get our final position
		-- and we let Defold take care of the animation from current
		-- position to the end position
		local angle_in_radians = math.rad(self.angle)
		local rot = vmath.quat_rotation_z(angle_in_radians)
		local mv = vmath.vector3(800, 0, 0)
		local to = go.get_position(bullet) + vmath.rotate(rot, v) -- move
		go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_INSINE, 0.5, 0, function()
			go.delete(bullet)
		end)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
